#!/usr/bin/env ruby

# So I can use compass
require 'compass'
Compass.add_project_configuration 'compass_config.rb'

# Generate Slugs
require 'to_slug'

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

# Delete Drafts
preprocess do
  @items.delete_if { |i| i[:draft] }
end

# Deal with static files
route '/static/*' do
  # /static/foo.html/ → /assets/foo.html
  '/assets' + item.identifier[7..-2]
end

compile '/static/*' do

end

compile '/assets/stylesheets/*/' do
  filter :sass, Compass.sass_engine_options
end

compile '/assets/javascripts/*/' do
  ext = item[:extension].nil? ? nil : item[:extension].split('.').last
  if ext == 'coffee'
    filter :coffeescript
    # filter :uglify_js
  elsif ext == "js"
    # filter :uglify_js
  else
    raise "Unknown thing #{item.attributes}"
  end
end

compile '/posts/*/' do
  ext = item[:extension].nil? ? nil : item[:extension].split('.').last
  if ext == 'pandoc'
    filter :pandoc
    filter :pygments
  else
    raise "Unknown ext: #{ext} with item: #{item.attributes}"
  end

  layout 'default'
end


compile '*' do
  if item.binary?
    # don’t filter binary items
  else
    ext = item[:extension].nil? ? nil : item[:extension].split('.').last
    if ext == 'haml'
      filter :haml, :format => :html5
    elsif ext == 'pandoc'
      filter :pandoc
    elsif ext == 'tex'
      filter :latex
    elsif ext == 'erb'
      filter :erb
    elsif ext =='txt'
      # no filter
    else
      raise "WHAT IS THIS EXT? While processing #{item.attributes}"
    end

    if item[:layout] != 'none' && ext != 'tex' && ext != 'txt'
      layout "default"
    end
  end
end

route '/assets/stylesheets/*/' do
  item.identifier.chop + '.css'
end

route '/assets/javascripts/*/' do
  item.identifier.chop + '.js'
end

route '/posts/*/' do
  date = item[:created_at]
  raise "No Posted Date!" if date.nil?

  slug = item[:title].to_slug

  "/blog/#{date.year}/#{date.month}/#{date.day}/#{slug}/index.html"

end

route 'sitemap.xml' do
  "/sitemap.xml"
end

route '/robots/' do
  "/robots.txt"
end

route '*' do
  ext = item[:extension].nil? ? nil : item[:extension].split('.').last

  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  elsif ext == 'tex'
    item.identifier.chop + '.pdf'
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end

layout '*', :haml, :format => :html5
